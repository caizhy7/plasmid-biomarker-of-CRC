####2022-08-23 Zhiyuan Cai####

####download SRAdata####
prefetch SRRnum

####SRA-to-fastq####
fastq-dump --split-3 --readids SRRnum 


####kneaddata####
kneaddata -t 16 --input SRRnum_1.fastq --input SRRnum_2.fastq --output kneaddata_demo_output --trimmomatic trimmomatic-0.39-2/ --trimmomatic-options 'ILLUMINACLIP:trimmomatic-0.39-2/adapters/TruSeq3-PE.fa:2:40:15 SLIDINGWINDOW:4:20 MINLEN:50' --reference-db database/kneaddata/ --bowtie2-options '--very-sensitive --dovetail' --remove-intermediate-output

####metaphlan2####
metaphlan2.py --input_type fastq <(cat SRRnum_kneaddata_paired_?.fastq) >  SRRnum.tsv 

####megahit####
megahit -1 SRRnum_1.fastq -2 kSRRnum_2.fastq -o megahitSRRnum --continue

####PlasFlow####
PlasFlow.py --input SRRnum.fasta --output SRRnum.tsv --threshold 0.7 


####filter contig(>1kb)####
cat plasmidsSRRnum.fasta | awk '!/^>/ { printf "%s", $0; n = "\n" } /^>/ { print n $0; n = "" } END { printf "%s", n } '| paste - - |awk 'length($7) >=1000 {print $1 "\n" $7}' > plasmid_1kbSRRnum.fasta ;done &

####PRODIGAL v2.6.3 [February, 2016]####
prodigal  -p meta -a protein_seqSRRnum.fasta -m -d nucleotide_seqSRRnum.fasta  -o genesSRRnum.gff -f gff -s poteintialSRRnum.stat -i plasmid_1kbSRRnum.fasta 


####cd-hit-est####
cd-hit-est -i nucleotide_seqSRRnum.fasta -o plasmid_nrgeneSRRnum.fasta -aS 0.9 -c 0.95 -G 0 -M 0 -T 9 -g 1 


####salmon-1.5.2####
####index####
salmon  index -t plasmid_1kbSRRnum.fasta  -p 32 -k 31 -i plasmid_indexSRRnum 
salmon  index -t nucleotide_seqSRRnum.fasta  -p 32 -k 31 -i plasmid_gene_indexSRRnum 

####quant####
salmon quant -i indexSRRnum -l A -1 SRRnum_kneaddata_paired_1.fastq -2 SRRnum_kneaddata_paired_2.fastq -o plasmid_salmonSRRnum --meta 
salmon quant -i indexSRRnum -l A -1 SRRnum_kneaddata_paired_1.fastq -2 SRRnum_kneaddata_paired_2.fastq -o plasmid_gene_salmonSRRnum --meta


####blast####
makeblastdb -in plasmiddb/plasmids.fna  -dbtype nucl -parse_seqids  -out plasmiddb

blastn -num_threads 16 -query plasmid_1kbSRRnum.fasta  -db plasmiddb -out blast_plasmid_1kbSRRnum.tsv -outfmt '6 qseqid sseqid pident length qcovs qcovhsp qcovus mismatch gapopen qstart qend sstart send evalue bitscore'


####eggNOG-annotation####
emapper.py  -i protein_seqSRRnum.fasta -o NOGSRRnum --cpu 8 --no_file_comments --override

####CAZY-annotation####
run_dbcan.py protein_seqSRRnum.fasta  protein --db_dir CAZyDB/ --out_dir cazyout_SRRnum


####MMUPHin####
library(MMUPHin)
fit_adjust_batch <- adjust_batch(feature_abd = crc_count_all8,
                                 batch = "batch",
                                 covariates = "group",
                                 data = metadata)
CRC_abd_adj <- fit_adjust_batch$feature_abd_adj

CRC_ddcount_adj<-CRC_abd_adj[which(CRC_abd_adj$batch %in% c("CHN1", "CHN2", "JPN", "AUS", "FRA", "USA")),]
fit_lm_meta <- lm_meta(feature_abd = CRC_ddcount_adj,
                       batch = "batch",
                       exposure = "group",
                       data = metadata,
                       control = list(verbose = FALSE))
meta_fits <- fit_lm_meta$meta_fits
meta_fits %>%
  filter(pval< 0.05) %>%
  arrange(coef) %>%
  mutate(feature = factor(feature, levels = feature)) %>%
  ggplot(aes(y = coef, x = feature)) +
  geom_bar(stat = "identity") +
  coord_flip()
meta_feature<-na.omit(meta_fits[meta_fits$pval< 0.05,]$feature)

####Boruta####
library(Boruta)
seed(666)
CRC_ddcount_adj<-CRC_abd_adj[which(CRC_abd_adj$batch %in% c("CHN1", "CHN2", "JPN", "AUS", "FRA", "USA")),]
CRC_ddcount_boruta<-CRC_ddcount_adj[,c("group",meta_feature)]
boruta.train <- Boruta(as.factor(group) ~ .,data = CRC_ddcount_boruta, doTrace = 2)
decision<-as.data.frame(boruta.train$finalDecision)
microbiome_markers<- rownames(decision)[decision$`boruta.train$finalDecision` !="Rejected"]



####cross-validation within each cohort####
library(randomForest)
rf_selfcv_count<-CRC_abd_adj[which(CRC_abd_adj$batch %in% c("CHN1", "CHN2", "JPN", "AUS", "FRA", "USA")),]

for (g in c("CHN1","CHN2","JPN","AUS","FRA","USA")) {
  train_6_data<-rf_selfcv_count[which(rf_selfcv_count$batch == g),]
  train_6_data<-train_6_data[,c("group",microbiome_markers)]
  for (j in 1:20) {  set.seed(9*j)
    folds <- createFolds(y=train_6_data$group,k=10)
    for(i in 1:10){    
      fold_test <- train_6_data[folds[[i]],]   
      fold_train <- train_6_data[-folds[[i]],]     
      predict_model <- randomForest(group~.,data= fold_train,ntree=500,proximity=TRUE,importance=TRUE)
      predict_selfcv <- predict (predict_model,type="prob",newdata=fold_test )
      predict_result<-roc(response = fold_test$group,
                        predictor = predict_selfcv[,2])
      print(predict_result$auc[1])
    }
  }
}

####cohort-cohort validation####

rf_c2c_count<-CRC_abd_adj[which(CRC_abd_adj$batch %in% c("CHN1", "CHN2", "JPN", "AUS", "FRA", "USA")),]

for (g in c("CHN1","CHN2","JPN","AUS","FRA","USA")) {
  train_6_data<-rf_c2c_count[which(rf_c2c_count$batch == g),]
  train_6_data<-train_6_data[,c("group",microbiome_markers)]
  for (j in 1:20) {  set.seed(9*j)
    folds <- createFolds(y=train_6_data$group,k=10)
    for(i in 1:10){    
      fold_test <- train_6_data[folds[[i]],]   
      fold_train <- train_6_data[-folds[[i]],]     
      predict_model <- randomForest(group~.,data= fold_train,ntree=500,proximity=TRUE,importance=TRUE)
  
      for (s in c("CHN1","CHN2","JPN","AUS","FRA","USA")) {
        train_6_data_c2c<-rf_c2c_count[which(rf_c2c_count$batch == s),]
        train_6_data_c2c<-train_6_data_c2c[,c("group",microbiome_markers)]
        predict_c2c <- predict (predict_model,type="prob",newdata=train_6_data_c2c)
        predict_result<-roc(response = train_6_data_c2c$group,
                        predictor = predict_c2c[,2])
        print(predict_result$auc[1])
      }
    }
  }
}



####loco validation####

rf_loco_count<-CRC_abd_adj[which(CRC_abd_adj$batch %in% c("CHN1", "CHN2", "JPN", "AUS", "FRA", "USA")),]

for (g in c("CHN1","CHN2","JPN","AUS","FRA","USA")) {
  train_6_data<-rf_loco_count[which(rf_loco_count$batch == g),]
  train_6_data<-train_6_data[,c("group",microbiome_markers)]
  train_5_data<-train_6_data[which(train_6_data$batch != g),]
  train_loco_data<-train_6_data[which(train_6_data$batch == g),]
  for (j in 1:20) {  set.seed(9*j)
    folds <- createFolds(y=train_5_data$group,k=10)
    for(i in 1:10){    
      fold_test <- train_5_data[folds[[i]],]   
      fold_train <- train_5_data[-folds[[i]],]     
      predict_model <- randomForest(group~.,data= fold_train,ntree=500,proximity=TRUE,importance=TRUE)
      predict_loco <- predict (predict_model,type="prob",newdata=train_loco_data )
      predict_result<-roc(response = train_loco_data$group,
                        predictor = predict_loco[,2])
      print(predict_result$auc[1])
    }
  }
}

####independent validation####

rf_indepedent_count_CHN3<-CRC_abd_adj[which(CRC_abd_adj$batch %in% "CHN3"),]
rf_indepedent_count_GER<-CRC_abd_adj[which(CRC_abd_adj$batch %in% "GER"),]
rf_train_count<-CRC_abd_adj[which(CRC_abd_adj$batch %in% c("CHN1", "CHN2", "JPN", "AUS", "FRA", "USA")),]

  for (j in 1:20) {  set.seed(9*j)
    folds <- createFolds(y=rf_train_count$group,k=10)
    for(i in 1:10){    
      fold_test <- rf_train_count[folds[[i]],]   
      fold_train <- rf_train_count[-folds[[i]],]     
      predict_model <- randomForest(group~.,data= fold_train,ntree=500,proximity=TRUE,importance=TRUE)
      predict_indepent_CHN3 <- predict (predict_model,type="prob",newdata=rf_indepedent_count_CHN3 )
      predict_result_CHN3<-roc(response = rf_indepedent_count_CHN3$group,
                        predictor = predict_indepent_CHN3[,2])
      print(predict_result_CHN3$auc[1])
      predict_indepent_GER<- predict (predict_model,type="prob",newdata=rf_indepedent_count_GER )
      predict_result_GER<-roc(response = rf_indepedent_count_GER$group,
                        predictor = predict_indepent_CHN3[,2])
      print(predict_result_GER$auc[1])
    }
  }
}


